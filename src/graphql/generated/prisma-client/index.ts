// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  phoneNumber: (where?: PhoneNumberWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  productPhoto: (where?: ProductPhotoWhereInput) => Promise<boolean>;
  productRating: (where?: ProductRatingWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userPhoto: (where?: UserPhotoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  phoneNumber: (
    where: PhoneNumberWhereUniqueInput
  ) => PhoneNumberNullablePromise;
  phoneNumbers: (args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PhoneNumber>;
  phoneNumbersConnection: (args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PhoneNumberConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  productPhoto: (
    where: ProductPhotoWhereUniqueInput
  ) => ProductPhotoNullablePromise;
  productPhotos: (args?: {
    where?: ProductPhotoWhereInput;
    orderBy?: ProductPhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductPhoto>;
  productPhotosConnection: (args?: {
    where?: ProductPhotoWhereInput;
    orderBy?: ProductPhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductPhotoConnectionPromise;
  productRating: (
    where: ProductRatingWhereUniqueInput
  ) => ProductRatingNullablePromise;
  productRatings: (args?: {
    where?: ProductRatingWhereInput;
    orderBy?: ProductRatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductRating>;
  productRatingsConnection: (args?: {
    where?: ProductRatingWhereInput;
    orderBy?: ProductRatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductRatingConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewNullablePromise;
  reviews: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Review>;
  reviewsConnection: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReviewConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userPhoto: (where: UserPhotoWhereUniqueInput) => UserPhotoNullablePromise;
  userPhotos: (args?: {
    where?: UserPhotoWhereInput;
    orderBy?: UserPhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserPhoto>;
  userPhotosConnection: (args?: {
    where?: UserPhotoWhereInput;
    orderBy?: UserPhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserPhotoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPhoneNumber: (data: PhoneNumberCreateInput) => PhoneNumberPromise;
  updatePhoneNumber: (args: {
    data: PhoneNumberUpdateInput;
    where: PhoneNumberWhereUniqueInput;
  }) => PhoneNumberPromise;
  updateManyPhoneNumbers: (args: {
    data: PhoneNumberUpdateManyMutationInput;
    where?: PhoneNumberWhereInput;
  }) => BatchPayloadPromise;
  upsertPhoneNumber: (args: {
    where: PhoneNumberWhereUniqueInput;
    create: PhoneNumberCreateInput;
    update: PhoneNumberUpdateInput;
  }) => PhoneNumberPromise;
  deletePhoneNumber: (where: PhoneNumberWhereUniqueInput) => PhoneNumberPromise;
  deleteManyPhoneNumbers: (
    where?: PhoneNumberWhereInput
  ) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProductPhoto: (data: ProductPhotoCreateInput) => ProductPhotoPromise;
  updateProductPhoto: (args: {
    data: ProductPhotoUpdateInput;
    where: ProductPhotoWhereUniqueInput;
  }) => ProductPhotoPromise;
  updateManyProductPhotos: (args: {
    data: ProductPhotoUpdateManyMutationInput;
    where?: ProductPhotoWhereInput;
  }) => BatchPayloadPromise;
  upsertProductPhoto: (args: {
    where: ProductPhotoWhereUniqueInput;
    create: ProductPhotoCreateInput;
    update: ProductPhotoUpdateInput;
  }) => ProductPhotoPromise;
  deleteProductPhoto: (
    where: ProductPhotoWhereUniqueInput
  ) => ProductPhotoPromise;
  deleteManyProductPhotos: (
    where?: ProductPhotoWhereInput
  ) => BatchPayloadPromise;
  createProductRating: (data: ProductRatingCreateInput) => ProductRatingPromise;
  updateProductRating: (args: {
    data: ProductRatingUpdateInput;
    where: ProductRatingWhereUniqueInput;
  }) => ProductRatingPromise;
  updateManyProductRatings: (args: {
    data: ProductRatingUpdateManyMutationInput;
    where?: ProductRatingWhereInput;
  }) => BatchPayloadPromise;
  upsertProductRating: (args: {
    where: ProductRatingWhereUniqueInput;
    create: ProductRatingCreateInput;
    update: ProductRatingUpdateInput;
  }) => ProductRatingPromise;
  deleteProductRating: (
    where: ProductRatingWhereUniqueInput
  ) => ProductRatingPromise;
  deleteManyProductRatings: (
    where?: ProductRatingWhereInput
  ) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (args: {
    data: ReviewUpdateInput;
    where: ReviewWhereUniqueInput;
  }) => ReviewPromise;
  updateManyReviews: (args: {
    data: ReviewUpdateManyMutationInput;
    where?: ReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertReview: (args: {
    where: ReviewWhereUniqueInput;
    create: ReviewCreateInput;
    update: ReviewUpdateInput;
  }) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserPhoto: (data: UserPhotoCreateInput) => UserPhotoPromise;
  updateUserPhoto: (args: {
    data: UserPhotoUpdateInput;
    where: UserPhotoWhereUniqueInput;
  }) => UserPhotoPromise;
  updateManyUserPhotos: (args: {
    data: UserPhotoUpdateManyMutationInput;
    where?: UserPhotoWhereInput;
  }) => BatchPayloadPromise;
  upsertUserPhoto: (args: {
    where: UserPhotoWhereUniqueInput;
    create: UserPhotoCreateInput;
    update: UserPhotoUpdateInput;
  }) => UserPhotoPromise;
  deleteUserPhoto: (where: UserPhotoWhereUniqueInput) => UserPhotoPromise;
  deleteManyUserPhotos: (where?: UserPhotoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  phoneNumber: (
    where?: PhoneNumberSubscriptionWhereInput
  ) => PhoneNumberSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  productPhoto: (
    where?: ProductPhotoSubscriptionWhereInput
  ) => ProductPhotoSubscriptionPayloadSubscription;
  productRating: (
    where?: ProductRatingSubscriptionWhereInput
  ) => ProductRatingSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userPhoto: (
    where?: UserPhotoSubscriptionWhereInput
  ) => UserPhotoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserType = "ADMIN" | "SELLER" | "CONSUMER";

export type PhoneNumberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "phone_ASC"
  | "phone_DESC";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "review_text_ASC"
  | "review_text_DESC"
  | "review_time_friendly_ASC"
  | "review_time_friendly_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC";

export type ProductPhotoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "thumb_url_ASC"
  | "thumb_url_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "friendly_time_ASC"
  | "friendly_time_DESC"
  | "width_ASC"
  | "width_DESC"
  | "height_ASC"
  | "height_DESC";

export type UserPhotoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "thumb_url_ASC"
  | "thumb_url_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "friendly_time_ASC"
  | "friendly_time_DESC"
  | "width_ASC"
  | "width_DESC"
  | "height_ASC"
  | "height_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "thumb_ASC"
  | "thumb_DESC"
  | "featured_image_ASC"
  | "featured_image_DESC"
  | "photos_url_ASC"
  | "photos_url_DESC"
  | "has_online_delivery_ASC"
  | "has_online_delivery_DESC"
  | "is_delivering_now_ASC"
  | "is_delivering_now_DESC"
  | "deeplink_ASC"
  | "deeplink_DESC"
  | "photo_count_ASC"
  | "photo_count_DESC";

export type ProductRatingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "aggregate_rating_ASC"
  | "aggregate_rating_DESC"
  | "votes_ASC"
  | "votes_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "user_type_ASC"
  | "user_type_DESC"
  | "uid_ASC"
  | "uid_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PhoneNumberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PhoneNumberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  AND?: Maybe<PhoneNumberWhereInput[] | PhoneNumberWhereInput>;
  OR?: Maybe<PhoneNumberWhereInput[] | PhoneNumberWhereInput>;
  NOT?: Maybe<PhoneNumberWhereInput[] | PhoneNumberWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone_number_every?: Maybe<PhoneNumberWhereInput>;
  phone_number_some?: Maybe<PhoneNumberWhereInput>;
  phone_number_none?: Maybe<PhoneNumberWhereInput>;
  user_type?: Maybe<UserType>;
  user_type_not?: Maybe<UserType>;
  user_type_in?: Maybe<UserType[] | UserType>;
  user_type_not_in?: Maybe<UserType[] | UserType>;
  reviews_every?: Maybe<ReviewWhereInput>;
  reviews_some?: Maybe<ReviewWhereInput>;
  reviews_none?: Maybe<ReviewWhereInput>;
  photos_every?: Maybe<UserPhotoWhereInput>;
  photos_some?: Maybe<UserPhotoWhereInput>;
  photos_none?: Maybe<UserPhotoWhereInput>;
  uid?: Maybe<String>;
  uid_not?: Maybe<String>;
  uid_in?: Maybe<String[] | String>;
  uid_not_in?: Maybe<String[] | String>;
  uid_lt?: Maybe<String>;
  uid_lte?: Maybe<String>;
  uid_gt?: Maybe<String>;
  uid_gte?: Maybe<String>;
  uid_contains?: Maybe<String>;
  uid_not_contains?: Maybe<String>;
  uid_starts_with?: Maybe<String>;
  uid_not_starts_with?: Maybe<String>;
  uid_ends_with?: Maybe<String>;
  uid_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ReviewWhereInput {
  user?: Maybe<UserWhereInput>;
  product?: Maybe<ProductWhereInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  review_text?: Maybe<String>;
  review_text_not?: Maybe<String>;
  review_text_in?: Maybe<String[] | String>;
  review_text_not_in?: Maybe<String[] | String>;
  review_text_lt?: Maybe<String>;
  review_text_lte?: Maybe<String>;
  review_text_gt?: Maybe<String>;
  review_text_gte?: Maybe<String>;
  review_text_contains?: Maybe<String>;
  review_text_not_contains?: Maybe<String>;
  review_text_starts_with?: Maybe<String>;
  review_text_not_starts_with?: Maybe<String>;
  review_text_ends_with?: Maybe<String>;
  review_text_not_ends_with?: Maybe<String>;
  review_time_friendly?: Maybe<String>;
  review_time_friendly_not?: Maybe<String>;
  review_time_friendly_in?: Maybe<String[] | String>;
  review_time_friendly_not_in?: Maybe<String[] | String>;
  review_time_friendly_lt?: Maybe<String>;
  review_time_friendly_lte?: Maybe<String>;
  review_time_friendly_gt?: Maybe<String>;
  review_time_friendly_gte?: Maybe<String>;
  review_time_friendly_contains?: Maybe<String>;
  review_time_friendly_not_contains?: Maybe<String>;
  review_time_friendly_starts_with?: Maybe<String>;
  review_time_friendly_not_starts_with?: Maybe<String>;
  review_time_friendly_ends_with?: Maybe<String>;
  review_time_friendly_not_ends_with?: Maybe<String>;
  timestamp?: Maybe<Int>;
  timestamp_not?: Maybe<Int>;
  timestamp_in?: Maybe<Int[] | Int>;
  timestamp_not_in?: Maybe<Int[] | Int>;
  timestamp_lt?: Maybe<Int>;
  timestamp_lte?: Maybe<Int>;
  timestamp_gt?: Maybe<Int>;
  timestamp_gte?: Maybe<Int>;
  AND?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  OR?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  NOT?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  thumb?: Maybe<String>;
  thumb_not?: Maybe<String>;
  thumb_in?: Maybe<String[] | String>;
  thumb_not_in?: Maybe<String[] | String>;
  thumb_lt?: Maybe<String>;
  thumb_lte?: Maybe<String>;
  thumb_gt?: Maybe<String>;
  thumb_gte?: Maybe<String>;
  thumb_contains?: Maybe<String>;
  thumb_not_contains?: Maybe<String>;
  thumb_starts_with?: Maybe<String>;
  thumb_not_starts_with?: Maybe<String>;
  thumb_ends_with?: Maybe<String>;
  thumb_not_ends_with?: Maybe<String>;
  featured_image?: Maybe<String>;
  featured_image_not?: Maybe<String>;
  featured_image_in?: Maybe<String[] | String>;
  featured_image_not_in?: Maybe<String[] | String>;
  featured_image_lt?: Maybe<String>;
  featured_image_lte?: Maybe<String>;
  featured_image_gt?: Maybe<String>;
  featured_image_gte?: Maybe<String>;
  featured_image_contains?: Maybe<String>;
  featured_image_not_contains?: Maybe<String>;
  featured_image_starts_with?: Maybe<String>;
  featured_image_not_starts_with?: Maybe<String>;
  featured_image_ends_with?: Maybe<String>;
  featured_image_not_ends_with?: Maybe<String>;
  photos_url?: Maybe<String>;
  photos_url_not?: Maybe<String>;
  photos_url_in?: Maybe<String[] | String>;
  photos_url_not_in?: Maybe<String[] | String>;
  photos_url_lt?: Maybe<String>;
  photos_url_lte?: Maybe<String>;
  photos_url_gt?: Maybe<String>;
  photos_url_gte?: Maybe<String>;
  photos_url_contains?: Maybe<String>;
  photos_url_not_contains?: Maybe<String>;
  photos_url_starts_with?: Maybe<String>;
  photos_url_not_starts_with?: Maybe<String>;
  photos_url_ends_with?: Maybe<String>;
  photos_url_not_ends_with?: Maybe<String>;
  user_rating?: Maybe<ProductRatingWhereInput>;
  has_online_delivery?: Maybe<Boolean>;
  has_online_delivery_not?: Maybe<Boolean>;
  is_delivering_now?: Maybe<Boolean>;
  is_delivering_now_not?: Maybe<Boolean>;
  deeplink?: Maybe<String>;
  deeplink_not?: Maybe<String>;
  deeplink_in?: Maybe<String[] | String>;
  deeplink_not_in?: Maybe<String[] | String>;
  deeplink_lt?: Maybe<String>;
  deeplink_lte?: Maybe<String>;
  deeplink_gt?: Maybe<String>;
  deeplink_gte?: Maybe<String>;
  deeplink_contains?: Maybe<String>;
  deeplink_not_contains?: Maybe<String>;
  deeplink_starts_with?: Maybe<String>;
  deeplink_not_starts_with?: Maybe<String>;
  deeplink_ends_with?: Maybe<String>;
  deeplink_not_ends_with?: Maybe<String>;
  photo_count?: Maybe<Int>;
  photo_count_not?: Maybe<Int>;
  photo_count_in?: Maybe<Int[] | Int>;
  photo_count_not_in?: Maybe<Int[] | Int>;
  photo_count_lt?: Maybe<Int>;
  photo_count_lte?: Maybe<Int>;
  photo_count_gt?: Maybe<Int>;
  photo_count_gte?: Maybe<Int>;
  photos_every?: Maybe<ProductPhotoWhereInput>;
  photos_some?: Maybe<ProductPhotoWhereInput>;
  photos_none?: Maybe<ProductPhotoWhereInput>;
  all_reviews_every?: Maybe<ReviewWhereInput>;
  all_reviews_some?: Maybe<ReviewWhereInput>;
  all_reviews_none?: Maybe<ReviewWhereInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface ProductRatingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  aggregate_rating?: Maybe<Float>;
  aggregate_rating_not?: Maybe<Float>;
  aggregate_rating_in?: Maybe<Float[] | Float>;
  aggregate_rating_not_in?: Maybe<Float[] | Float>;
  aggregate_rating_lt?: Maybe<Float>;
  aggregate_rating_lte?: Maybe<Float>;
  aggregate_rating_gt?: Maybe<Float>;
  aggregate_rating_gte?: Maybe<Float>;
  votes?: Maybe<Int>;
  votes_not?: Maybe<Int>;
  votes_in?: Maybe<Int[] | Int>;
  votes_not_in?: Maybe<Int[] | Int>;
  votes_lt?: Maybe<Int>;
  votes_lte?: Maybe<Int>;
  votes_gt?: Maybe<Int>;
  votes_gte?: Maybe<Int>;
  AND?: Maybe<ProductRatingWhereInput[] | ProductRatingWhereInput>;
  OR?: Maybe<ProductRatingWhereInput[] | ProductRatingWhereInput>;
  NOT?: Maybe<ProductRatingWhereInput[] | ProductRatingWhereInput>;
}

export interface ProductPhotoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  product?: Maybe<ProductWhereInput>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  thumb_url?: Maybe<String>;
  thumb_url_not?: Maybe<String>;
  thumb_url_in?: Maybe<String[] | String>;
  thumb_url_not_in?: Maybe<String[] | String>;
  thumb_url_lt?: Maybe<String>;
  thumb_url_lte?: Maybe<String>;
  thumb_url_gt?: Maybe<String>;
  thumb_url_gte?: Maybe<String>;
  thumb_url_contains?: Maybe<String>;
  thumb_url_not_contains?: Maybe<String>;
  thumb_url_starts_with?: Maybe<String>;
  thumb_url_not_starts_with?: Maybe<String>;
  thumb_url_ends_with?: Maybe<String>;
  thumb_url_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  timestamp?: Maybe<Int>;
  timestamp_not?: Maybe<Int>;
  timestamp_in?: Maybe<Int[] | Int>;
  timestamp_not_in?: Maybe<Int[] | Int>;
  timestamp_lt?: Maybe<Int>;
  timestamp_lte?: Maybe<Int>;
  timestamp_gt?: Maybe<Int>;
  timestamp_gte?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  friendly_time_not?: Maybe<String>;
  friendly_time_in?: Maybe<String[] | String>;
  friendly_time_not_in?: Maybe<String[] | String>;
  friendly_time_lt?: Maybe<String>;
  friendly_time_lte?: Maybe<String>;
  friendly_time_gt?: Maybe<String>;
  friendly_time_gte?: Maybe<String>;
  friendly_time_contains?: Maybe<String>;
  friendly_time_not_contains?: Maybe<String>;
  friendly_time_starts_with?: Maybe<String>;
  friendly_time_not_starts_with?: Maybe<String>;
  friendly_time_ends_with?: Maybe<String>;
  friendly_time_not_ends_with?: Maybe<String>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  AND?: Maybe<ProductPhotoWhereInput[] | ProductPhotoWhereInput>;
  OR?: Maybe<ProductPhotoWhereInput[] | ProductPhotoWhereInput>;
  NOT?: Maybe<ProductPhotoWhereInput[] | ProductPhotoWhereInput>;
}

export interface UserPhotoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  thumb_url?: Maybe<String>;
  thumb_url_not?: Maybe<String>;
  thumb_url_in?: Maybe<String[] | String>;
  thumb_url_not_in?: Maybe<String[] | String>;
  thumb_url_lt?: Maybe<String>;
  thumb_url_lte?: Maybe<String>;
  thumb_url_gt?: Maybe<String>;
  thumb_url_gte?: Maybe<String>;
  thumb_url_contains?: Maybe<String>;
  thumb_url_not_contains?: Maybe<String>;
  thumb_url_starts_with?: Maybe<String>;
  thumb_url_not_starts_with?: Maybe<String>;
  thumb_url_ends_with?: Maybe<String>;
  thumb_url_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  timestamp?: Maybe<Int>;
  timestamp_not?: Maybe<Int>;
  timestamp_in?: Maybe<Int[] | Int>;
  timestamp_not_in?: Maybe<Int[] | Int>;
  timestamp_lt?: Maybe<Int>;
  timestamp_lte?: Maybe<Int>;
  timestamp_gt?: Maybe<Int>;
  timestamp_gte?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  friendly_time_not?: Maybe<String>;
  friendly_time_in?: Maybe<String[] | String>;
  friendly_time_not_in?: Maybe<String[] | String>;
  friendly_time_lt?: Maybe<String>;
  friendly_time_lte?: Maybe<String>;
  friendly_time_gt?: Maybe<String>;
  friendly_time_gte?: Maybe<String>;
  friendly_time_contains?: Maybe<String>;
  friendly_time_not_contains?: Maybe<String>;
  friendly_time_starts_with?: Maybe<String>;
  friendly_time_not_starts_with?: Maybe<String>;
  friendly_time_ends_with?: Maybe<String>;
  friendly_time_not_ends_with?: Maybe<String>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  AND?: Maybe<UserPhotoWhereInput[] | UserPhotoWhereInput>;
  OR?: Maybe<UserPhotoWhereInput[] | UserPhotoWhereInput>;
  NOT?: Maybe<UserPhotoWhereInput[] | UserPhotoWhereInput>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProductPhotoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProductRatingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  uid?: Maybe<String>;
}>;

export type UserPhotoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PhoneNumberCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPhone_numberInput;
  code?: Maybe<String>;
  phone: String;
}

export interface UserCreateOneWithoutPhone_numberInput {
  create?: Maybe<UserCreateWithoutPhone_numberInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPhone_numberInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  user_type?: Maybe<UserType>;
  reviews?: Maybe<ReviewCreateManyWithoutUserInput>;
  photos?: Maybe<UserPhotoCreateManyWithoutUserInput>;
  uid: String;
}

export interface ReviewCreateManyWithoutUserInput {
  create?: Maybe<ReviewCreateWithoutUserInput[] | ReviewCreateWithoutUserInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutUserInput {
  product: ProductCreateOneWithoutAll_reviewsInput;
  id?: Maybe<ID_Input>;
  rating: Int;
  review_text: String;
  review_time_friendly: String;
  timestamp: Int;
}

export interface ProductCreateOneWithoutAll_reviewsInput {
  create?: Maybe<ProductCreateWithoutAll_reviewsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutAll_reviewsInput {
  id?: Maybe<ID_Input>;
  name: String;
  url: String;
  thumb?: Maybe<String>;
  featured_image?: Maybe<String>;
  photos_url?: Maybe<String>;
  user_rating: ProductRatingCreateOneInput;
  has_online_delivery?: Maybe<Boolean>;
  is_delivering_now?: Maybe<Boolean>;
  deeplink?: Maybe<String>;
  photo_count: Int;
  photos?: Maybe<ProductPhotoCreateManyWithoutProductInput>;
}

export interface ProductRatingCreateOneInput {
  create?: Maybe<ProductRatingCreateInput>;
  connect?: Maybe<ProductRatingWhereUniqueInput>;
}

export interface ProductRatingCreateInput {
  id?: Maybe<ID_Input>;
  aggregate_rating?: Maybe<Float>;
  votes?: Maybe<Int>;
}

export interface ProductPhotoCreateManyWithoutProductInput {
  create?: Maybe<
    | ProductPhotoCreateWithoutProductInput[]
    | ProductPhotoCreateWithoutProductInput
  >;
  connect?: Maybe<
    ProductPhotoWhereUniqueInput[] | ProductPhotoWhereUniqueInput
  >;
}

export interface ProductPhotoCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface UserPhotoCreateManyWithoutUserInput {
  create?: Maybe<
    UserPhotoCreateWithoutUserInput[] | UserPhotoCreateWithoutUserInput
  >;
  connect?: Maybe<UserPhotoWhereUniqueInput[] | UserPhotoWhereUniqueInput>;
}

export interface UserPhotoCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface PhoneNumberUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPhone_numberInput>;
  code?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutPhone_numberInput {
  create?: Maybe<UserCreateWithoutPhone_numberInput>;
  update?: Maybe<UserUpdateWithoutPhone_numberDataInput>;
  upsert?: Maybe<UserUpsertWithoutPhone_numberInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPhone_numberDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  user_type?: Maybe<UserType>;
  reviews?: Maybe<ReviewUpdateManyWithoutUserInput>;
  photos?: Maybe<UserPhotoUpdateManyWithoutUserInput>;
  uid?: Maybe<String>;
}

export interface ReviewUpdateManyWithoutUserInput {
  create?: Maybe<ReviewCreateWithoutUserInput[] | ReviewCreateWithoutUserInput>;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    | ReviewUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    | ReviewUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutUserDataInput;
}

export interface ReviewUpdateWithoutUserDataInput {
  product?: Maybe<ProductUpdateOneRequiredWithoutAll_reviewsInput>;
  rating?: Maybe<Int>;
  review_text?: Maybe<String>;
  review_time_friendly?: Maybe<String>;
  timestamp?: Maybe<Int>;
}

export interface ProductUpdateOneRequiredWithoutAll_reviewsInput {
  create?: Maybe<ProductCreateWithoutAll_reviewsInput>;
  update?: Maybe<ProductUpdateWithoutAll_reviewsDataInput>;
  upsert?: Maybe<ProductUpsertWithoutAll_reviewsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateWithoutAll_reviewsDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  thumb?: Maybe<String>;
  featured_image?: Maybe<String>;
  photos_url?: Maybe<String>;
  user_rating?: Maybe<ProductRatingUpdateOneRequiredInput>;
  has_online_delivery?: Maybe<Boolean>;
  is_delivering_now?: Maybe<Boolean>;
  deeplink?: Maybe<String>;
  photo_count?: Maybe<Int>;
  photos?: Maybe<ProductPhotoUpdateManyWithoutProductInput>;
}

export interface ProductRatingUpdateOneRequiredInput {
  create?: Maybe<ProductRatingCreateInput>;
  update?: Maybe<ProductRatingUpdateDataInput>;
  upsert?: Maybe<ProductRatingUpsertNestedInput>;
  connect?: Maybe<ProductRatingWhereUniqueInput>;
}

export interface ProductRatingUpdateDataInput {
  aggregate_rating?: Maybe<Float>;
  votes?: Maybe<Int>;
}

export interface ProductRatingUpsertNestedInput {
  update: ProductRatingUpdateDataInput;
  create: ProductRatingCreateInput;
}

export interface ProductPhotoUpdateManyWithoutProductInput {
  create?: Maybe<
    | ProductPhotoCreateWithoutProductInput[]
    | ProductPhotoCreateWithoutProductInput
  >;
  delete?: Maybe<ProductPhotoWhereUniqueInput[] | ProductPhotoWhereUniqueInput>;
  connect?: Maybe<
    ProductPhotoWhereUniqueInput[] | ProductPhotoWhereUniqueInput
  >;
  set?: Maybe<ProductPhotoWhereUniqueInput[] | ProductPhotoWhereUniqueInput>;
  disconnect?: Maybe<
    ProductPhotoWhereUniqueInput[] | ProductPhotoWhereUniqueInput
  >;
  update?: Maybe<
    | ProductPhotoUpdateWithWhereUniqueWithoutProductInput[]
    | ProductPhotoUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | ProductPhotoUpsertWithWhereUniqueWithoutProductInput[]
    | ProductPhotoUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<
    ProductPhotoScalarWhereInput[] | ProductPhotoScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProductPhotoUpdateManyWithWhereNestedInput[]
    | ProductPhotoUpdateManyWithWhereNestedInput
  >;
}

export interface ProductPhotoUpdateWithWhereUniqueWithoutProductInput {
  where: ProductPhotoWhereUniqueInput;
  data: ProductPhotoUpdateWithoutProductDataInput;
}

export interface ProductPhotoUpdateWithoutProductDataInput {
  url?: Maybe<String>;
  thumb_url?: Maybe<String>;
  caption?: Maybe<String>;
  timestamp?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
}

export interface ProductPhotoUpsertWithWhereUniqueWithoutProductInput {
  where: ProductPhotoWhereUniqueInput;
  update: ProductPhotoUpdateWithoutProductDataInput;
  create: ProductPhotoCreateWithoutProductInput;
}

export interface ProductPhotoScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  thumb_url?: Maybe<String>;
  thumb_url_not?: Maybe<String>;
  thumb_url_in?: Maybe<String[] | String>;
  thumb_url_not_in?: Maybe<String[] | String>;
  thumb_url_lt?: Maybe<String>;
  thumb_url_lte?: Maybe<String>;
  thumb_url_gt?: Maybe<String>;
  thumb_url_gte?: Maybe<String>;
  thumb_url_contains?: Maybe<String>;
  thumb_url_not_contains?: Maybe<String>;
  thumb_url_starts_with?: Maybe<String>;
  thumb_url_not_starts_with?: Maybe<String>;
  thumb_url_ends_with?: Maybe<String>;
  thumb_url_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  timestamp?: Maybe<Int>;
  timestamp_not?: Maybe<Int>;
  timestamp_in?: Maybe<Int[] | Int>;
  timestamp_not_in?: Maybe<Int[] | Int>;
  timestamp_lt?: Maybe<Int>;
  timestamp_lte?: Maybe<Int>;
  timestamp_gt?: Maybe<Int>;
  timestamp_gte?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  friendly_time_not?: Maybe<String>;
  friendly_time_in?: Maybe<String[] | String>;
  friendly_time_not_in?: Maybe<String[] | String>;
  friendly_time_lt?: Maybe<String>;
  friendly_time_lte?: Maybe<String>;
  friendly_time_gt?: Maybe<String>;
  friendly_time_gte?: Maybe<String>;
  friendly_time_contains?: Maybe<String>;
  friendly_time_not_contains?: Maybe<String>;
  friendly_time_starts_with?: Maybe<String>;
  friendly_time_not_starts_with?: Maybe<String>;
  friendly_time_ends_with?: Maybe<String>;
  friendly_time_not_ends_with?: Maybe<String>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  AND?: Maybe<ProductPhotoScalarWhereInput[] | ProductPhotoScalarWhereInput>;
  OR?: Maybe<ProductPhotoScalarWhereInput[] | ProductPhotoScalarWhereInput>;
  NOT?: Maybe<ProductPhotoScalarWhereInput[] | ProductPhotoScalarWhereInput>;
}

export interface ProductPhotoUpdateManyWithWhereNestedInput {
  where: ProductPhotoScalarWhereInput;
  data: ProductPhotoUpdateManyDataInput;
}

export interface ProductPhotoUpdateManyDataInput {
  url?: Maybe<String>;
  thumb_url?: Maybe<String>;
  caption?: Maybe<String>;
  timestamp?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
}

export interface ProductUpsertWithoutAll_reviewsInput {
  update: ProductUpdateWithoutAll_reviewsDataInput;
  create: ProductCreateWithoutAll_reviewsInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutUserDataInput;
  create: ReviewCreateWithoutUserInput;
}

export interface ReviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  review_text?: Maybe<String>;
  review_text_not?: Maybe<String>;
  review_text_in?: Maybe<String[] | String>;
  review_text_not_in?: Maybe<String[] | String>;
  review_text_lt?: Maybe<String>;
  review_text_lte?: Maybe<String>;
  review_text_gt?: Maybe<String>;
  review_text_gte?: Maybe<String>;
  review_text_contains?: Maybe<String>;
  review_text_not_contains?: Maybe<String>;
  review_text_starts_with?: Maybe<String>;
  review_text_not_starts_with?: Maybe<String>;
  review_text_ends_with?: Maybe<String>;
  review_text_not_ends_with?: Maybe<String>;
  review_time_friendly?: Maybe<String>;
  review_time_friendly_not?: Maybe<String>;
  review_time_friendly_in?: Maybe<String[] | String>;
  review_time_friendly_not_in?: Maybe<String[] | String>;
  review_time_friendly_lt?: Maybe<String>;
  review_time_friendly_lte?: Maybe<String>;
  review_time_friendly_gt?: Maybe<String>;
  review_time_friendly_gte?: Maybe<String>;
  review_time_friendly_contains?: Maybe<String>;
  review_time_friendly_not_contains?: Maybe<String>;
  review_time_friendly_starts_with?: Maybe<String>;
  review_time_friendly_not_starts_with?: Maybe<String>;
  review_time_friendly_ends_with?: Maybe<String>;
  review_time_friendly_not_ends_with?: Maybe<String>;
  timestamp?: Maybe<Int>;
  timestamp_not?: Maybe<Int>;
  timestamp_in?: Maybe<Int[] | Int>;
  timestamp_not_in?: Maybe<Int[] | Int>;
  timestamp_lt?: Maybe<Int>;
  timestamp_lte?: Maybe<Int>;
  timestamp_gt?: Maybe<Int>;
  timestamp_gte?: Maybe<Int>;
  AND?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  OR?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  NOT?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface ReviewUpdateManyDataInput {
  rating?: Maybe<Int>;
  review_text?: Maybe<String>;
  review_time_friendly?: Maybe<String>;
  timestamp?: Maybe<Int>;
}

export interface UserPhotoUpdateManyWithoutUserInput {
  create?: Maybe<
    UserPhotoCreateWithoutUserInput[] | UserPhotoCreateWithoutUserInput
  >;
  delete?: Maybe<UserPhotoWhereUniqueInput[] | UserPhotoWhereUniqueInput>;
  connect?: Maybe<UserPhotoWhereUniqueInput[] | UserPhotoWhereUniqueInput>;
  set?: Maybe<UserPhotoWhereUniqueInput[] | UserPhotoWhereUniqueInput>;
  disconnect?: Maybe<UserPhotoWhereUniqueInput[] | UserPhotoWhereUniqueInput>;
  update?: Maybe<
    | UserPhotoUpdateWithWhereUniqueWithoutUserInput[]
    | UserPhotoUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UserPhotoUpsertWithWhereUniqueWithoutUserInput[]
    | UserPhotoUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<UserPhotoScalarWhereInput[] | UserPhotoScalarWhereInput>;
  updateMany?: Maybe<
    | UserPhotoUpdateManyWithWhereNestedInput[]
    | UserPhotoUpdateManyWithWhereNestedInput
  >;
}

export interface UserPhotoUpdateWithWhereUniqueWithoutUserInput {
  where: UserPhotoWhereUniqueInput;
  data: UserPhotoUpdateWithoutUserDataInput;
}

export interface UserPhotoUpdateWithoutUserDataInput {
  url?: Maybe<String>;
  thumb_url?: Maybe<String>;
  caption?: Maybe<String>;
  timestamp?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
}

export interface UserPhotoUpsertWithWhereUniqueWithoutUserInput {
  where: UserPhotoWhereUniqueInput;
  update: UserPhotoUpdateWithoutUserDataInput;
  create: UserPhotoCreateWithoutUserInput;
}

export interface UserPhotoScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  thumb_url?: Maybe<String>;
  thumb_url_not?: Maybe<String>;
  thumb_url_in?: Maybe<String[] | String>;
  thumb_url_not_in?: Maybe<String[] | String>;
  thumb_url_lt?: Maybe<String>;
  thumb_url_lte?: Maybe<String>;
  thumb_url_gt?: Maybe<String>;
  thumb_url_gte?: Maybe<String>;
  thumb_url_contains?: Maybe<String>;
  thumb_url_not_contains?: Maybe<String>;
  thumb_url_starts_with?: Maybe<String>;
  thumb_url_not_starts_with?: Maybe<String>;
  thumb_url_ends_with?: Maybe<String>;
  thumb_url_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  timestamp?: Maybe<Int>;
  timestamp_not?: Maybe<Int>;
  timestamp_in?: Maybe<Int[] | Int>;
  timestamp_not_in?: Maybe<Int[] | Int>;
  timestamp_lt?: Maybe<Int>;
  timestamp_lte?: Maybe<Int>;
  timestamp_gt?: Maybe<Int>;
  timestamp_gte?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  friendly_time_not?: Maybe<String>;
  friendly_time_in?: Maybe<String[] | String>;
  friendly_time_not_in?: Maybe<String[] | String>;
  friendly_time_lt?: Maybe<String>;
  friendly_time_lte?: Maybe<String>;
  friendly_time_gt?: Maybe<String>;
  friendly_time_gte?: Maybe<String>;
  friendly_time_contains?: Maybe<String>;
  friendly_time_not_contains?: Maybe<String>;
  friendly_time_starts_with?: Maybe<String>;
  friendly_time_not_starts_with?: Maybe<String>;
  friendly_time_ends_with?: Maybe<String>;
  friendly_time_not_ends_with?: Maybe<String>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  AND?: Maybe<UserPhotoScalarWhereInput[] | UserPhotoScalarWhereInput>;
  OR?: Maybe<UserPhotoScalarWhereInput[] | UserPhotoScalarWhereInput>;
  NOT?: Maybe<UserPhotoScalarWhereInput[] | UserPhotoScalarWhereInput>;
}

export interface UserPhotoUpdateManyWithWhereNestedInput {
  where: UserPhotoScalarWhereInput;
  data: UserPhotoUpdateManyDataInput;
}

export interface UserPhotoUpdateManyDataInput {
  url?: Maybe<String>;
  thumb_url?: Maybe<String>;
  caption?: Maybe<String>;
  timestamp?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
}

export interface UserUpsertWithoutPhone_numberInput {
  update: UserUpdateWithoutPhone_numberDataInput;
  create: UserCreateWithoutPhone_numberInput;
}

export interface PhoneNumberUpdateManyMutationInput {
  code?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  url: String;
  thumb?: Maybe<String>;
  featured_image?: Maybe<String>;
  photos_url?: Maybe<String>;
  user_rating: ProductRatingCreateOneInput;
  has_online_delivery?: Maybe<Boolean>;
  is_delivering_now?: Maybe<Boolean>;
  deeplink?: Maybe<String>;
  photo_count: Int;
  photos?: Maybe<ProductPhotoCreateManyWithoutProductInput>;
  all_reviews?: Maybe<ReviewCreateManyWithoutProductInput>;
}

export interface ReviewCreateManyWithoutProductInput {
  create?: Maybe<
    ReviewCreateWithoutProductInput[] | ReviewCreateWithoutProductInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutProductInput {
  user: UserCreateOneWithoutReviewsInput;
  id?: Maybe<ID_Input>;
  rating: Int;
  review_text: String;
  review_time_friendly: String;
  timestamp: Int;
}

export interface UserCreateOneWithoutReviewsInput {
  create?: Maybe<UserCreateWithoutReviewsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutReviewsInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone_number?: Maybe<PhoneNumberCreateManyWithoutUserInput>;
  user_type?: Maybe<UserType>;
  photos?: Maybe<UserPhotoCreateManyWithoutUserInput>;
  uid: String;
}

export interface PhoneNumberCreateManyWithoutUserInput {
  create?: Maybe<
    PhoneNumberCreateWithoutUserInput[] | PhoneNumberCreateWithoutUserInput
  >;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
}

export interface PhoneNumberCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  code?: Maybe<String>;
  phone: String;
}

export interface ProductUpdateInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  thumb?: Maybe<String>;
  featured_image?: Maybe<String>;
  photos_url?: Maybe<String>;
  user_rating?: Maybe<ProductRatingUpdateOneRequiredInput>;
  has_online_delivery?: Maybe<Boolean>;
  is_delivering_now?: Maybe<Boolean>;
  deeplink?: Maybe<String>;
  photo_count?: Maybe<Int>;
  photos?: Maybe<ProductPhotoUpdateManyWithoutProductInput>;
  all_reviews?: Maybe<ReviewUpdateManyWithoutProductInput>;
}

export interface ReviewUpdateManyWithoutProductInput {
  create?: Maybe<
    ReviewCreateWithoutProductInput[] | ReviewCreateWithoutProductInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutProductInput[]
    | ReviewUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutProductInput[]
    | ReviewUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutProductInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutProductDataInput;
}

export interface ReviewUpdateWithoutProductDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutReviewsInput>;
  rating?: Maybe<Int>;
  review_text?: Maybe<String>;
  review_time_friendly?: Maybe<String>;
  timestamp?: Maybe<Int>;
}

export interface UserUpdateOneRequiredWithoutReviewsInput {
  create?: Maybe<UserCreateWithoutReviewsInput>;
  update?: Maybe<UserUpdateWithoutReviewsDataInput>;
  upsert?: Maybe<UserUpsertWithoutReviewsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutReviewsDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone_number?: Maybe<PhoneNumberUpdateManyWithoutUserInput>;
  user_type?: Maybe<UserType>;
  photos?: Maybe<UserPhotoUpdateManyWithoutUserInput>;
  uid?: Maybe<String>;
}

export interface PhoneNumberUpdateManyWithoutUserInput {
  create?: Maybe<
    PhoneNumberCreateWithoutUserInput[] | PhoneNumberCreateWithoutUserInput
  >;
  delete?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  set?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  disconnect?: Maybe<
    PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput
  >;
  update?: Maybe<
    | PhoneNumberUpdateWithWhereUniqueWithoutUserInput[]
    | PhoneNumberUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PhoneNumberUpsertWithWhereUniqueWithoutUserInput[]
    | PhoneNumberUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput
  >;
  updateMany?: Maybe<
    | PhoneNumberUpdateManyWithWhereNestedInput[]
    | PhoneNumberUpdateManyWithWhereNestedInput
  >;
}

export interface PhoneNumberUpdateWithWhereUniqueWithoutUserInput {
  where: PhoneNumberWhereUniqueInput;
  data: PhoneNumberUpdateWithoutUserDataInput;
}

export interface PhoneNumberUpdateWithoutUserDataInput {
  code?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface PhoneNumberUpsertWithWhereUniqueWithoutUserInput {
  where: PhoneNumberWhereUniqueInput;
  update: PhoneNumberUpdateWithoutUserDataInput;
  create: PhoneNumberCreateWithoutUserInput;
}

export interface PhoneNumberScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  AND?: Maybe<PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput>;
  OR?: Maybe<PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput>;
  NOT?: Maybe<PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput>;
}

export interface PhoneNumberUpdateManyWithWhereNestedInput {
  where: PhoneNumberScalarWhereInput;
  data: PhoneNumberUpdateManyDataInput;
}

export interface PhoneNumberUpdateManyDataInput {
  code?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput;
  create: UserCreateWithoutReviewsInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutProductInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutProductDataInput;
  create: ReviewCreateWithoutProductInput;
}

export interface ProductUpdateManyMutationInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  thumb?: Maybe<String>;
  featured_image?: Maybe<String>;
  photos_url?: Maybe<String>;
  has_online_delivery?: Maybe<Boolean>;
  is_delivering_now?: Maybe<Boolean>;
  deeplink?: Maybe<String>;
  photo_count?: Maybe<Int>;
}

export interface ProductPhotoCreateInput {
  id?: Maybe<ID_Input>;
  product: ProductCreateOneWithoutPhotosInput;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface ProductCreateOneWithoutPhotosInput {
  create?: Maybe<ProductCreateWithoutPhotosInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutPhotosInput {
  id?: Maybe<ID_Input>;
  name: String;
  url: String;
  thumb?: Maybe<String>;
  featured_image?: Maybe<String>;
  photos_url?: Maybe<String>;
  user_rating: ProductRatingCreateOneInput;
  has_online_delivery?: Maybe<Boolean>;
  is_delivering_now?: Maybe<Boolean>;
  deeplink?: Maybe<String>;
  photo_count: Int;
  all_reviews?: Maybe<ReviewCreateManyWithoutProductInput>;
}

export interface ProductPhotoUpdateInput {
  product?: Maybe<ProductUpdateOneRequiredWithoutPhotosInput>;
  url?: Maybe<String>;
  thumb_url?: Maybe<String>;
  caption?: Maybe<String>;
  timestamp?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
}

export interface ProductUpdateOneRequiredWithoutPhotosInput {
  create?: Maybe<ProductCreateWithoutPhotosInput>;
  update?: Maybe<ProductUpdateWithoutPhotosDataInput>;
  upsert?: Maybe<ProductUpsertWithoutPhotosInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateWithoutPhotosDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  thumb?: Maybe<String>;
  featured_image?: Maybe<String>;
  photos_url?: Maybe<String>;
  user_rating?: Maybe<ProductRatingUpdateOneRequiredInput>;
  has_online_delivery?: Maybe<Boolean>;
  is_delivering_now?: Maybe<Boolean>;
  deeplink?: Maybe<String>;
  photo_count?: Maybe<Int>;
  all_reviews?: Maybe<ReviewUpdateManyWithoutProductInput>;
}

export interface ProductUpsertWithoutPhotosInput {
  update: ProductUpdateWithoutPhotosDataInput;
  create: ProductCreateWithoutPhotosInput;
}

export interface ProductPhotoUpdateManyMutationInput {
  url?: Maybe<String>;
  thumb_url?: Maybe<String>;
  caption?: Maybe<String>;
  timestamp?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
}

export interface ProductRatingUpdateInput {
  aggregate_rating?: Maybe<Float>;
  votes?: Maybe<Int>;
}

export interface ProductRatingUpdateManyMutationInput {
  aggregate_rating?: Maybe<Float>;
  votes?: Maybe<Int>;
}

export interface ReviewCreateInput {
  user: UserCreateOneWithoutReviewsInput;
  product: ProductCreateOneWithoutAll_reviewsInput;
  id?: Maybe<ID_Input>;
  rating: Int;
  review_text: String;
  review_time_friendly: String;
  timestamp: Int;
}

export interface ReviewUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutReviewsInput>;
  product?: Maybe<ProductUpdateOneRequiredWithoutAll_reviewsInput>;
  rating?: Maybe<Int>;
  review_text?: Maybe<String>;
  review_time_friendly?: Maybe<String>;
  timestamp?: Maybe<Int>;
}

export interface ReviewUpdateManyMutationInput {
  rating?: Maybe<Int>;
  review_text?: Maybe<String>;
  review_time_friendly?: Maybe<String>;
  timestamp?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone_number?: Maybe<PhoneNumberCreateManyWithoutUserInput>;
  user_type?: Maybe<UserType>;
  reviews?: Maybe<ReviewCreateManyWithoutUserInput>;
  photos?: Maybe<UserPhotoCreateManyWithoutUserInput>;
  uid: String;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone_number?: Maybe<PhoneNumberUpdateManyWithoutUserInput>;
  user_type?: Maybe<UserType>;
  reviews?: Maybe<ReviewUpdateManyWithoutUserInput>;
  photos?: Maybe<UserPhotoUpdateManyWithoutUserInput>;
  uid?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  user_type?: Maybe<UserType>;
  uid?: Maybe<String>;
}

export interface UserPhotoCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPhotosInput;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface UserCreateOneWithoutPhotosInput {
  create?: Maybe<UserCreateWithoutPhotosInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPhotosInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone_number?: Maybe<PhoneNumberCreateManyWithoutUserInput>;
  user_type?: Maybe<UserType>;
  reviews?: Maybe<ReviewCreateManyWithoutUserInput>;
  uid: String;
}

export interface UserPhotoUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPhotosInput>;
  url?: Maybe<String>;
  thumb_url?: Maybe<String>;
  caption?: Maybe<String>;
  timestamp?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
}

export interface UserUpdateOneRequiredWithoutPhotosInput {
  create?: Maybe<UserCreateWithoutPhotosInput>;
  update?: Maybe<UserUpdateWithoutPhotosDataInput>;
  upsert?: Maybe<UserUpsertWithoutPhotosInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPhotosDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone_number?: Maybe<PhoneNumberUpdateManyWithoutUserInput>;
  user_type?: Maybe<UserType>;
  reviews?: Maybe<ReviewUpdateManyWithoutUserInput>;
  uid?: Maybe<String>;
}

export interface UserUpsertWithoutPhotosInput {
  update: UserUpdateWithoutPhotosDataInput;
  create: UserCreateWithoutPhotosInput;
}

export interface UserPhotoUpdateManyMutationInput {
  url?: Maybe<String>;
  thumb_url?: Maybe<String>;
  caption?: Maybe<String>;
  timestamp?: Maybe<Int>;
  friendly_time?: Maybe<String>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
}

export interface PhoneNumberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PhoneNumberWhereInput>;
  AND?: Maybe<
    PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput
  >;
  OR?: Maybe<
    PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput
  >;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface ProductPhotoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductPhotoWhereInput>;
  AND?: Maybe<
    ProductPhotoSubscriptionWhereInput[] | ProductPhotoSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProductPhotoSubscriptionWhereInput[] | ProductPhotoSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProductPhotoSubscriptionWhereInput[] | ProductPhotoSubscriptionWhereInput
  >;
}

export interface ProductRatingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductRatingWhereInput>;
  AND?: Maybe<
    ProductRatingSubscriptionWhereInput[] | ProductRatingSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProductRatingSubscriptionWhereInput[] | ProductRatingSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProductRatingSubscriptionWhereInput[] | ProductRatingSubscriptionWhereInput
  >;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReviewWhereInput>;
  AND?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  OR?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  NOT?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserPhotoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserPhotoWhereInput>;
  AND?: Maybe<
    UserPhotoSubscriptionWhereInput[] | UserPhotoSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserPhotoSubscriptionWhereInput[] | UserPhotoSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserPhotoSubscriptionWhereInput[] | UserPhotoSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface PhoneNumber {
  id: ID_Output;
  code: String;
  phone: String;
}

export interface PhoneNumberPromise extends Promise<PhoneNumber>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  code: () => Promise<String>;
  phone: () => Promise<String>;
}

export interface PhoneNumberSubscription
  extends Promise<AsyncIterator<PhoneNumber>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  code: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
}

export interface PhoneNumberNullablePromise
  extends Promise<PhoneNumber | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  code: () => Promise<String>;
  phone: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  email?: String;
  name?: String;
  user_type: UserType;
  uid: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_type: () => Promise<UserType>;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photos: <T = FragmentableArray<UserPhoto>>(args?: {
    where?: UserPhotoWhereInput;
    orderBy?: UserPhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  uid: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone_number: <T = Promise<AsyncIterator<PhoneNumberSubscription>>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_type: () => Promise<AsyncIterator<UserType>>;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photos: <T = Promise<AsyncIterator<UserPhotoSubscription>>>(args?: {
    where?: UserPhotoWhereInput;
    orderBy?: UserPhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  uid: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user_type: () => Promise<UserType>;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photos: <T = FragmentableArray<UserPhoto>>(args?: {
    where?: UserPhotoWhereInput;
    orderBy?: UserPhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  uid: () => Promise<String>;
}

export interface Review {
  id: ID_Output;
  rating: Int;
  review_text: String;
  review_time_friendly: String;
  timestamp: Int;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  user: <T = UserPromise>() => T;
  product: <T = ProductPromise>() => T;
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  review_text: () => Promise<String>;
  review_time_friendly: () => Promise<String>;
  timestamp: () => Promise<Int>;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  user: <T = UserSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  review_text: () => Promise<AsyncIterator<String>>;
  review_time_friendly: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewNullablePromise
  extends Promise<Review | null>,
    Fragmentable {
  user: <T = UserPromise>() => T;
  product: <T = ProductPromise>() => T;
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  review_text: () => Promise<String>;
  review_time_friendly: () => Promise<String>;
  timestamp: () => Promise<Int>;
}

export interface Product {
  id: ID_Output;
  name: String;
  url: String;
  thumb: String;
  featured_image: String;
  photos_url: String;
  has_online_delivery: Boolean;
  is_delivering_now: Boolean;
  deeplink?: String;
  photo_count: Int;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  thumb: () => Promise<String>;
  featured_image: () => Promise<String>;
  photos_url: () => Promise<String>;
  user_rating: <T = ProductRatingPromise>() => T;
  has_online_delivery: () => Promise<Boolean>;
  is_delivering_now: () => Promise<Boolean>;
  deeplink: () => Promise<String>;
  photo_count: () => Promise<Int>;
  photos: <T = FragmentableArray<ProductPhoto>>(args?: {
    where?: ProductPhotoWhereInput;
    orderBy?: ProductPhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  all_reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  thumb: () => Promise<AsyncIterator<String>>;
  featured_image: () => Promise<AsyncIterator<String>>;
  photos_url: () => Promise<AsyncIterator<String>>;
  user_rating: <T = ProductRatingSubscription>() => T;
  has_online_delivery: () => Promise<AsyncIterator<Boolean>>;
  is_delivering_now: () => Promise<AsyncIterator<Boolean>>;
  deeplink: () => Promise<AsyncIterator<String>>;
  photo_count: () => Promise<AsyncIterator<Int>>;
  photos: <T = Promise<AsyncIterator<ProductPhotoSubscription>>>(args?: {
    where?: ProductPhotoWhereInput;
    orderBy?: ProductPhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  all_reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  thumb: () => Promise<String>;
  featured_image: () => Promise<String>;
  photos_url: () => Promise<String>;
  user_rating: <T = ProductRatingPromise>() => T;
  has_online_delivery: () => Promise<Boolean>;
  is_delivering_now: () => Promise<Boolean>;
  deeplink: () => Promise<String>;
  photo_count: () => Promise<Int>;
  photos: <T = FragmentableArray<ProductPhoto>>(args?: {
    where?: ProductPhotoWhereInput;
    orderBy?: ProductPhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  all_reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductRating {
  id: ID_Output;
  aggregate_rating: Float;
  votes: Int;
}

export interface ProductRatingPromise
  extends Promise<ProductRating>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  aggregate_rating: () => Promise<Float>;
  votes: () => Promise<Int>;
}

export interface ProductRatingSubscription
  extends Promise<AsyncIterator<ProductRating>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  aggregate_rating: () => Promise<AsyncIterator<Float>>;
  votes: () => Promise<AsyncIterator<Int>>;
}

export interface ProductRatingNullablePromise
  extends Promise<ProductRating | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  aggregate_rating: () => Promise<Float>;
  votes: () => Promise<Int>;
}

export interface ProductPhoto {
  id: ID_Output;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface ProductPhotoPromise
  extends Promise<ProductPhoto>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = ProductPromise>() => T;
  url: () => Promise<String>;
  thumb_url: () => Promise<String>;
  caption: () => Promise<String>;
  timestamp: () => Promise<Int>;
  friendly_time: () => Promise<String>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
}

export interface ProductPhotoSubscription
  extends Promise<AsyncIterator<ProductPhoto>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  product: <T = ProductSubscription>() => T;
  url: () => Promise<AsyncIterator<String>>;
  thumb_url: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
  friendly_time: () => Promise<AsyncIterator<String>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
}

export interface ProductPhotoNullablePromise
  extends Promise<ProductPhoto | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = ProductPromise>() => T;
  url: () => Promise<String>;
  thumb_url: () => Promise<String>;
  caption: () => Promise<String>;
  timestamp: () => Promise<Int>;
  friendly_time: () => Promise<String>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
}

export interface UserPhoto {
  id: ID_Output;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface UserPhotoPromise extends Promise<UserPhoto>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  url: () => Promise<String>;
  thumb_url: () => Promise<String>;
  caption: () => Promise<String>;
  timestamp: () => Promise<Int>;
  friendly_time: () => Promise<String>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
}

export interface UserPhotoSubscription
  extends Promise<AsyncIterator<UserPhoto>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  url: () => Promise<AsyncIterator<String>>;
  thumb_url: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
  friendly_time: () => Promise<AsyncIterator<String>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
}

export interface UserPhotoNullablePromise
  extends Promise<UserPhoto | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  url: () => Promise<String>;
  thumb_url: () => Promise<String>;
  caption: () => Promise<String>;
  timestamp: () => Promise<Int>;
  friendly_time: () => Promise<String>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
}

export interface PhoneNumberConnection {
  pageInfo: PageInfo;
  edges: PhoneNumberEdge[];
}

export interface PhoneNumberConnectionPromise
  extends Promise<PhoneNumberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PhoneNumberEdge>>() => T;
  aggregate: <T = AggregatePhoneNumberPromise>() => T;
}

export interface PhoneNumberConnectionSubscription
  extends Promise<AsyncIterator<PhoneNumberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PhoneNumberEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePhoneNumberSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PhoneNumberEdge {
  node: PhoneNumber;
  cursor: String;
}

export interface PhoneNumberEdgePromise
  extends Promise<PhoneNumberEdge>,
    Fragmentable {
  node: <T = PhoneNumberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PhoneNumberEdgeSubscription
  extends Promise<AsyncIterator<PhoneNumberEdge>>,
    Fragmentable {
  node: <T = PhoneNumberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePhoneNumber {
  count: Int;
}

export interface AggregatePhoneNumberPromise
  extends Promise<AggregatePhoneNumber>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePhoneNumberSubscription
  extends Promise<AsyncIterator<AggregatePhoneNumber>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductPhotoConnection {
  pageInfo: PageInfo;
  edges: ProductPhotoEdge[];
}

export interface ProductPhotoConnectionPromise
  extends Promise<ProductPhotoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductPhotoEdge>>() => T;
  aggregate: <T = AggregateProductPhotoPromise>() => T;
}

export interface ProductPhotoConnectionSubscription
  extends Promise<AsyncIterator<ProductPhotoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductPhotoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductPhotoSubscription>() => T;
}

export interface ProductPhotoEdge {
  node: ProductPhoto;
  cursor: String;
}

export interface ProductPhotoEdgePromise
  extends Promise<ProductPhotoEdge>,
    Fragmentable {
  node: <T = ProductPhotoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductPhotoEdgeSubscription
  extends Promise<AsyncIterator<ProductPhotoEdge>>,
    Fragmentable {
  node: <T = ProductPhotoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductPhoto {
  count: Int;
}

export interface AggregateProductPhotoPromise
  extends Promise<AggregateProductPhoto>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductPhotoSubscription
  extends Promise<AsyncIterator<AggregateProductPhoto>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductRatingConnection {
  pageInfo: PageInfo;
  edges: ProductRatingEdge[];
}

export interface ProductRatingConnectionPromise
  extends Promise<ProductRatingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductRatingEdge>>() => T;
  aggregate: <T = AggregateProductRatingPromise>() => T;
}

export interface ProductRatingConnectionSubscription
  extends Promise<AsyncIterator<ProductRatingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductRatingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductRatingSubscription>() => T;
}

export interface ProductRatingEdge {
  node: ProductRating;
  cursor: String;
}

export interface ProductRatingEdgePromise
  extends Promise<ProductRatingEdge>,
    Fragmentable {
  node: <T = ProductRatingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductRatingEdgeSubscription
  extends Promise<AsyncIterator<ProductRatingEdge>>,
    Fragmentable {
  node: <T = ProductRatingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductRating {
  count: Int;
}

export interface AggregateProductRatingPromise
  extends Promise<AggregateProductRating>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductRatingSubscription
  extends Promise<AsyncIterator<AggregateProductRating>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserPhotoConnection {
  pageInfo: PageInfo;
  edges: UserPhotoEdge[];
}

export interface UserPhotoConnectionPromise
  extends Promise<UserPhotoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserPhotoEdge>>() => T;
  aggregate: <T = AggregateUserPhotoPromise>() => T;
}

export interface UserPhotoConnectionSubscription
  extends Promise<AsyncIterator<UserPhotoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserPhotoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserPhotoSubscription>() => T;
}

export interface UserPhotoEdge {
  node: UserPhoto;
  cursor: String;
}

export interface UserPhotoEdgePromise
  extends Promise<UserPhotoEdge>,
    Fragmentable {
  node: <T = UserPhotoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserPhotoEdgeSubscription
  extends Promise<AsyncIterator<UserPhotoEdge>>,
    Fragmentable {
  node: <T = UserPhotoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserPhoto {
  count: Int;
}

export interface AggregateUserPhotoPromise
  extends Promise<AggregateUserPhoto>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserPhotoSubscription
  extends Promise<AsyncIterator<AggregateUserPhoto>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PhoneNumberSubscriptionPayload {
  mutation: MutationType;
  node: PhoneNumber;
  updatedFields: String[];
  previousValues: PhoneNumberPreviousValues;
}

export interface PhoneNumberSubscriptionPayloadPromise
  extends Promise<PhoneNumberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PhoneNumberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PhoneNumberPreviousValuesPromise>() => T;
}

export interface PhoneNumberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PhoneNumberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PhoneNumberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PhoneNumberPreviousValuesSubscription>() => T;
}

export interface PhoneNumberPreviousValues {
  id: ID_Output;
  code: String;
  phone: String;
}

export interface PhoneNumberPreviousValuesPromise
  extends Promise<PhoneNumberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  phone: () => Promise<String>;
}

export interface PhoneNumberPreviousValuesSubscription
  extends Promise<AsyncIterator<PhoneNumberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  url: String;
  thumb: String;
  featured_image: String;
  photos_url: String;
  has_online_delivery: Boolean;
  is_delivering_now: Boolean;
  deeplink?: String;
  photo_count: Int;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  thumb: () => Promise<String>;
  featured_image: () => Promise<String>;
  photos_url: () => Promise<String>;
  has_online_delivery: () => Promise<Boolean>;
  is_delivering_now: () => Promise<Boolean>;
  deeplink: () => Promise<String>;
  photo_count: () => Promise<Int>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  thumb: () => Promise<AsyncIterator<String>>;
  featured_image: () => Promise<AsyncIterator<String>>;
  photos_url: () => Promise<AsyncIterator<String>>;
  has_online_delivery: () => Promise<AsyncIterator<Boolean>>;
  is_delivering_now: () => Promise<AsyncIterator<Boolean>>;
  deeplink: () => Promise<AsyncIterator<String>>;
  photo_count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductPhotoSubscriptionPayload {
  mutation: MutationType;
  node: ProductPhoto;
  updatedFields: String[];
  previousValues: ProductPhotoPreviousValues;
}

export interface ProductPhotoSubscriptionPayloadPromise
  extends Promise<ProductPhotoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPhotoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPhotoPreviousValuesPromise>() => T;
}

export interface ProductPhotoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductPhotoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductPhotoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPhotoPreviousValuesSubscription>() => T;
}

export interface ProductPhotoPreviousValues {
  id: ID_Output;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface ProductPhotoPreviousValuesPromise
  extends Promise<ProductPhotoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  thumb_url: () => Promise<String>;
  caption: () => Promise<String>;
  timestamp: () => Promise<Int>;
  friendly_time: () => Promise<String>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
}

export interface ProductPhotoPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPhotoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  thumb_url: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
  friendly_time: () => Promise<AsyncIterator<String>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
}

export interface ProductRatingSubscriptionPayload {
  mutation: MutationType;
  node: ProductRating;
  updatedFields: String[];
  previousValues: ProductRatingPreviousValues;
}

export interface ProductRatingSubscriptionPayloadPromise
  extends Promise<ProductRatingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductRatingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductRatingPreviousValuesPromise>() => T;
}

export interface ProductRatingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductRatingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductRatingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductRatingPreviousValuesSubscription>() => T;
}

export interface ProductRatingPreviousValues {
  id: ID_Output;
  aggregate_rating: Float;
  votes: Int;
}

export interface ProductRatingPreviousValuesPromise
  extends Promise<ProductRatingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  aggregate_rating: () => Promise<Float>;
  votes: () => Promise<Int>;
}

export interface ProductRatingPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductRatingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  aggregate_rating: () => Promise<AsyncIterator<Float>>;
  votes: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  rating: Int;
  review_text: String;
  review_time_friendly: String;
  timestamp: Int;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  review_text: () => Promise<String>;
  review_time_friendly: () => Promise<String>;
  timestamp: () => Promise<Int>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  review_text: () => Promise<AsyncIterator<String>>;
  review_time_friendly: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  name?: String;
  user_type: UserType;
  uid: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  user_type: () => Promise<UserType>;
  uid: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  user_type: () => Promise<AsyncIterator<UserType>>;
  uid: () => Promise<AsyncIterator<String>>;
}

export interface UserPhotoSubscriptionPayload {
  mutation: MutationType;
  node: UserPhoto;
  updatedFields: String[];
  previousValues: UserPhotoPreviousValues;
}

export interface UserPhotoSubscriptionPayloadPromise
  extends Promise<UserPhotoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPhotoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPhotoPreviousValuesPromise>() => T;
}

export interface UserPhotoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserPhotoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserPhotoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPhotoPreviousValuesSubscription>() => T;
}

export interface UserPhotoPreviousValues {
  id: ID_Output;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface UserPhotoPreviousValuesPromise
  extends Promise<UserPhotoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  thumb_url: () => Promise<String>;
  caption: () => Promise<String>;
  timestamp: () => Promise<Int>;
  friendly_time: () => Promise<String>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
}

export interface UserPhotoPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPhotoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  thumb_url: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
  friendly_time: () => Promise<AsyncIterator<String>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "PhoneNumber",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "ProductRating",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  },
  {
    name: "ProductPhoto",
    embedded: false
  },
  {
    name: "UserPhoto",
    embedded: false
  },
  {
    name: "UserType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://minze-database.herokuapp.com/`
});
export const prisma = new Prisma();
